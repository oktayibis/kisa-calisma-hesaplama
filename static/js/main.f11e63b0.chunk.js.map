{"version":3,"sources":["component/Rules.jsx","component/Culculate.jsx","App.js","serviceWorker.js","index.js"],"names":["Rules","state","collapseID","toggleCollapse","setState","prevState","className","color","onClick","this","style","marginBottom","id","isOpen","href","Component","Culculate","useState","totalIncome","setTotalIncome","monthlyNet","setMonthlyNet","workedDays","setWorkedDays","dailyPay","iskurPay","isverenPay","monthlyTotal","onChange","e","target","value","type","label","toFixed","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f11e63b0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { MDBBtn, MDBCollapse, MDBContainer, MDBAlert } from \"mdbreact\";\n\nclass Rules extends Component {\nstate = {\n  collapseID: \"\"\n}\n\ntoggleCollapse = collapseID => () => {\n  this.setState(prevState => ({\n    collapseID: prevState.collapseID !== collapseID ? collapseID : \"\"\n  }));\n}\n\nrender() {\n  return (\n      <div className='text-center' >\n      <MDBContainer>\n\n     \n      <MDBBtn\n        color=\"info \"\n      \n        onClick={this.toggleCollapse(\"company\")}\n        style={{ marginBottom: \"1rem\" }}\n        className='border-radius'\n    >\n      İşveren Şartları\n    </MDBBtn>\n\n    <MDBBtn\n      color='warning'\n      onClick={this.toggleCollapse(\"employee\")}\n      style={{ marginBottom: \"1rem\" }}\n      className='border-radius'\n    >\n      Çalışan Şartları\n    </MDBBtn>\n    <MDBBtn\n      color='success'\n      onClick={this.toggleCollapse(\"payment\")}\n      style={{ marginBottom: \"1rem\" }}\n      className='border-radius'\n    >\n     Ücret nasıl hesaplanır\n    </MDBBtn>\n        <MDBCollapse id=\"company\" isOpen={this.state.collapseID}>\n     \n            <MDBAlert className='text-justify' color='info'>\n            <li className='m-2 '>Kısa Çalışma ödeneğinden yararlanabilmek için işveren tarafından <a href='https://www.iskur.gov.tr/isveren/kisa-calisma-odenegi/basvuru-icin-gerekli-belgeler-ve-il-iletisim-adresleri/'>İşkur'a </a> belirtildiği şekilde başvuru yapması gerekmektedir.</li>\n            <li className='m-2'>Genel ekonomik, sektörel, bölgesel kriz veya zorlayıcı sebeplerle işyerindeki haftalık çalışma sürelerinin geçici olarak en az üçte bir oranında azaltılması veya süreklilik koşulu aranmaksızın işyerinde faaliyetin tamamen veya kısmen en az dört hafta süreyle durdurulması hallerinde işveren tarafından başvuru yapılması gerekmektedir.\n            <span className='font-weight-bold'> COVID-19 Zorlayıcı sebeplerden kabul edilmiş ve İşkur tarafından kısa çalışma ödeneği uygunluk listesine alınmıştır.</span></li>\n            <li className='m-2'>İşverenin başvurusu sonrası görevlendirilen bir müfettiş, yukarıda belirtilen şartlara durumun uygun olup olmadığını analiz edecektir.</li>\n            <li className='m-2'>Eğer müfettiş onayı ile kısa çalışma ödeneği uygun görülürse iş veren bu durumdan yararlanmasını istediği çalışan listesini işkur ile paylaşacaktır.</li>\n\n          </MDBAlert>\n     \n        </MDBCollapse>\n        <MDBCollapse id=\"employee\" isOpen={this.state.collapseID}>\n      \n            <MDBAlert className='text-left' color='warning'>\n            <li className='m-2'>Son 60 gün hizmet akdine tabi olmak kaydıyla son 3 yıl içinde 450 gün sigorta priminin ödemiş olması gerekmektedir.</li>\n            <li className='m-2'>Sigorta primi gün sayısı e-Devlet üzerinden, SGK dökümü ile kontrol edilebilir.</li>\n            <li className='m-2'>Ödeme süresi 3 ayı aşamaz</li>\n          </MDBAlert>\n        \n        \n        </MDBCollapse>\n        <MDBCollapse id=\"payment\" isOpen={this.state.collapseID}>\n  \n            <MDBAlert className='text-left' color='success'>\n            <li className='m-2'>Sigortalı çalışanın son oniki aylık prime esas kazançları dikkate alınarak hesaplanan günlük ortalama brüt kazancının % 60’ıdır. </li>\n            <li className='m-2'>Bu şekilde hesaplanan kısa çalışma ödeneği miktarı, aylık asgari ücretin brüt tutarının % 150’sini geçemez. </li>\n            <li className='m-2'>Eğer sigortalının çalıştığı gün olursa, bu miktar işveren tarafından ödenecektir.</li>\n          </MDBAlert>\n        \n        </MDBCollapse>\n        </MDBContainer>\n      </div>\n    );\n  }\n}\n\nexport default Rules;","import React, { useState } from \"react\";\nimport { MDBInput, MDBAlert, MDBRow, MDBCol } from \"mdbreact\";\n\nconst Culculate = () => {\n  const [totalIncome, setTotalIncome] = useState(0);\n  const [monthlyNet, setMonthlyNet] = useState(0);\n  const [workedDays, setWorkedDays] = useState(0)\n\n  const dailyPay = (totalIncome / 12 / 30) * 0.6;\n  const iskurPay = dailyPay * 30 > 4381 ? 4381 : dailyPay * 30;\n  const isverenPay = monthlyNet / 30 * workedDays;\n  const monthlyTotal = isverenPay + iskurPay;\n\n  return (\n    <div>\n      <h2 className=\"diplay-4\">Hesaplama</h2>\n      <MDBInput\n        onChange={e => setTotalIncome(e.target.value)}\n        type=\"number\"\n        label=\"Son 12 aylık primi ödenmiş toplam kazançınız\"\n      >\n        TL\n      </MDBInput>\n      <MDBRow>\n        <MDBCol>\n          <MDBInput\n            onChange={e => setMonthlyNet(e.target.value)}\n            type=\"number\"\n            label=\"Aylık net maaşınız\"\n          >\n            TL\n          </MDBInput>\n        </MDBCol>\n        <MDBCol>\n          <MDBInput\n            onChange={e => setWorkedDays(e.target.value)}\n            type=\"number\"\n            label=\"Çalıştığınız / Çalışacağınız Gün Sayısı\"\n          >\n            TL\n          </MDBInput>\n        </MDBCol>\n      </MDBRow>\n\n      <MDBAlert color=\"info\">\n        <small className=\"d-flex justify-content-evenly\">Günlük Hakediş:</small>\n        {dailyPay.toFixed(1)} TL\n      </MDBAlert>\n      <MDBAlert color={iskurPay === 4381 ? \"danger\" : \"primary\"}>\n        <small className=\"d-flex justify-content-evenly\">\n          Iskur Aylik Ödeme Tutarı:\n        </small>\n        {iskurPay.toFixed(1)} TL\n        {iskurPay === 4381\n          ? \"  --IsKur un ödeme miktari brüt asgari ücretin %150 sinden fazla olamaz! \"\n          : \"\"}\n      </MDBAlert>\n      <MDBAlert color=\"warning\">\n        <small className=\"d-flex justify-content-evenly\">\n          Isveren Aylik Ödeme:{\" \"}\n        </small>\n        {isverenPay.toFixed(1)} TL\n      </MDBAlert>\n      <MDBAlert color=\"success\">\n        <small className=\"d-flex justify-content-evenly\">Toplam Aylik: </small>\n        {monthlyTotal.toFixed(1)} TL\n      </MDBAlert>\n    </div>\n  );\n};\n\nexport default Culculate;\n","import React from \"react\";\n\nimport Rules from \"./component/Rules\";\nimport { MDBContainer } from \"mdbreact\";\nimport Culculate from \"./component/Culculate\";\n\nfunction App() {\n  return (\n    <div className='app-center '>\n   \n      <header>\n        <h1 className='border-radius display-4 text-center bg-dark text-light'> Kısa Çalışma Ödeneği Hesaplama</h1>\n      </header>\n\n     <MDBContainer>\n\n     <Rules />\n\n     </MDBContainer>\n     <MDBContainer>\n       <Culculate/>\n     </MDBContainer>\n   \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}